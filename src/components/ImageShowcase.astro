---
import H2Title from "./H2Title.astro";
import Swiper from "./Swiper.astro";
import type { GalleryData } from "../types";

// Access props passed to the component
const { gridTitle, images } = Astro.props as GalleryData;

// Sort and slice the images
const sortedImages = images.sort((a, b) => Number(b.top) - Number(a.top));
const cut = sortedImages.slice(0, 8);
const getPolishPhotoText = (count:number) => {
  if (count === 1) {
    return `+1 zdjęcie`;
  } else if (count >= 2 && count <= 4) {
    return `+${count} zdjęcia`;
  } else {
    return `+${count} zdjęć`;
  }
};
---

<div class="container my-[4rem]">
  {gridTitle && <H2Title text={gridTitle} />}
  {images.length === 0 && <p>Brak zdjęć</p>}
  {images.length < 8 ? (
    <Swiper images={sortedImages} />
  ) : (<div class="lg:hidden">
    <Swiper images={sortedImages} />
</div>  
  <div class="hidden lg:flex gap-8" data-js-grid>
    <div class="flex">
      <div class="w-[821px] h-[470px] flex flex-col gap-2">
        <!-- Верхний ряд -->
        <div class="flex gap-2 h-[359px]">
          <!-- Первая колонка -->
          <img
            src={cut[0].src}
            alt={cut[0].title}
            class="w-[542px] h-[359px] rounded-md object-cover object-center"
            data-js-grid-image
            data-js-title={cut[0].title}
            data-js-description={cut[0].description}
            data-index="0"
          />
          <!-- Вторая колонка -->
          <div class="flex flex-col gap-2">
            <img
              src={cut[1].src}
              alt={cut[1].title}
              class="w-[271px] h-[175px] rounded-md object-cover object-center grid-border cursor-pointer"
              data-js-grid-image
              data-js-title={cut[1].title}
              data-js-description={cut[1].description}
              data-index="1"
            />
            <img
              src={cut[2].src}
              alt={cut[2].title}
              class="w-[271px] h-[175px] rounded-md object-cover object-center grid-border cursor-pointer"
              data-js-grid-image
              data-js-title={cut[2].title}
              data-js-description={cut[2].description}
              data-index="2"
            />
          </div>
        </div>
        <!-- Нижний ряд -->
        <div class="flex gap-2 h-[103px]">
          {
            cut
              .slice(3, 8)
              .map((image, index) => (
                <img
                  src={image.src}
                  alt={image.title}
                  class="w-[157px] h-[103px] rounded-md object-cover object-center grid-border cursor-pointer"
                  data-js-grid-image
                  data-js-title={image.title}
                  data-js-description={image.description}
                  data-index={index + 3}
                />
              ))
          }
        </div>
      </div>
    </div>

    <div>
      <img
        src={cut[0].src}
        alt={cut[0].title}
        class="w-[406px] h-[262px] rounded-md object-cover cursor-pointer"
        data-js-active-image
      />
      <h5 data-js-active-title>{cut[0].title}</h5>
      <p class="text-base" data-js-active-description>
        {cut[0].description}
      </p>
    </div>
  </div>)}
  
  {
    images.length > 8 && (
      <div class="hidden lg:flex justify-center my-4">
        <button
          class="max-w-max mt-auto inline-flex items-center px-3 py-2 text-normal font-bold text-center text-black rounded-lg hover:bg-red-400 focus:ring-4 focus:outline-none focus:ring-red-400 category-background cursor-pointer"
          data-js-open-modal
        >
          {getPolishPhotoText(images.length - 8)}
          <svg
            class="rtl:rotate-180 w-3.5 h-3.5 ms-2"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 10" 
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M1 5h12m0 0L9 1m4 4L9 9"
            />
          </svg>
        </button>
      </div>
    )
  }
</div>



 <div class="fixed inset-0 hidden bg-black/75  items-center justify-center z-50" data-js-modal>
 
  <button class="absolute top-4 right-6 text-white text-4xl font-light hover:text-gray-300 transition-colors cursor-pointer" data-js-close-modal>&times;</button>
  
 
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 overflow-y-auto max-h-screen py-12">
 
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {images.map((image, index) => (
        <div class="group rounded-xl overflow-hidden shadow-xl transform transition duration-300 hover:scale-105 hover:shadow-2xl">
          <img
            src={image.src}
            alt={image.title || `Gallery image ${index + 1}`}
            class="w-full h-64 object-cover"
          />
          {image.title && (
            <div class="p-3 bg-white bg-opacity-90 text-gray-800">
              <h3 class="font-medium">{image.title}</h3>
              {image.description && <p class="text-sm text-gray-600">{image.description}</p>}
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
</div> 


<script>
  class ImageGrid {
    private images: {
      index: number;
      src: string;
      title: string;
      description: string;
    }[] = [];
    private activeImage: HTMLImageElement | null = null;
    private activeTitle: HTMLElement | null = null;
    private activeDescription: HTMLElement | null = null;

    constructor() {
      const gridElement = document.querySelector("[data-js-grid]");
      if (!gridElement) return;

      this.activeImage = document.querySelector("[data-js-active-image]");
      this.activeTitle = document.querySelector("[data-js-active-title]");
      this.activeDescription = document.querySelector(
        "[data-js-active-description]",
      );

      const imageElements = Array.from(
        gridElement.querySelectorAll("[data-js-grid-image]"),
      ) as HTMLImageElement[];

      imageElements.forEach((imageElement, i) => {
        const index = Number(imageElement.getAttribute("data-index"));
        const src = imageElement.getAttribute("src") || "";
        const title = imageElement.getAttribute("data-js-title") || "";
        const description =
          imageElement.getAttribute("data-js-description") || "";

        this.images.push({ index, src, title, description });

        imageElement.addEventListener("click", () =>
          this.swapImages(i, imageElements),
        );
      });
    }

    private swapImages(index: number, imageElements: HTMLImageElement[]) {
      if (index === 0) return;

      const firstImageElement = imageElements[0];
      const clickedImageElement = imageElements[index];

      // Сохраняем данные перед перестановкой
      const tempSrc = firstImageElement.src;
      const tempAlt = firstImageElement.alt;
      const tempTitle = firstImageElement.dataset.jsTitle;
      const tempDescription = firstImageElement.dataset.jsDescription;

      // Меняем src и атрибуты местами
      firstImageElement.src = clickedImageElement.src;
      firstImageElement.alt = clickedImageElement.alt;
      firstImageElement.dataset.jsTitle =
        clickedImageElement.dataset.jsTitle || "";
      firstImageElement.dataset.jsDescription =
        clickedImageElement.dataset.jsDescription || "";

      clickedImageElement.src = tempSrc;
      clickedImageElement.alt = tempAlt;
      clickedImageElement.dataset.jsTitle = tempTitle || "";
      clickedImageElement.dataset.jsDescription = tempDescription || "";

      // Обновляем активное изображение, заголовок и описание
      if (this.activeImage && this.activeTitle && this.activeDescription) {
        this.activeImage.src = firstImageElement.src;
        this.activeImage.alt = firstImageElement.alt;
        this.activeTitle.textContent = firstImageElement.dataset.jsTitle || "";
        this.activeDescription.textContent =
          firstImageElement.dataset.jsDescription || "";
      }

      // Добавляем плавность
      // firstImageElement.style.transition = "transform 0.2s";
      // clickedImageElement.style.transition = "transform 0.2s";
      // firstImageElement.style.transform = "scale(1.02)";
      // clickedImageElement.style.transform = "scale(1.02)";

      setTimeout(() => {
        firstImageElement.style.transform = "";
        clickedImageElement.style.transform = "";
      }, 200);
    }
  }

  // Инициализация класса после загрузки DOM
  document.addEventListener("DOMContentLoaded", () => new ImageGrid());

  class Modal {
  private images: { index: number; src: string; title: string; description: string }[] = [];
  private activeImage: HTMLImageElement | null = null;
  private activeTitle: HTMLElement | null = null;
  private activeDescription: HTMLElement | null = null;
  private modal: HTMLElement | null = null;
  private openModalBtn: HTMLElement | null = null;
  private closeModalBtn: HTMLElement | null = null;
  private modalOverlay: HTMLElement | null = null;

  constructor() {
    const gridElement = document.querySelector("[data-js-grid]");
    if (!gridElement) return;

    this.activeImage = document.querySelector("[data-js-active-image]");
    this.activeTitle = document.querySelector("[data-js-active-title]");
    this.activeDescription = document.querySelector("[data-js-active-description]");
    this.modal = document.querySelector("[data-js-modal]");
    this.openModalBtn = document.querySelector("[data-js-open-modal]");
    this.closeModalBtn = document.querySelector("[data-js-close-modal]");
    
    // Get the modal overlay (background) for click detection
    // We'll use the modal itself for this purpose, but we'll check the target
    this.modalOverlay = this.modal;

    const imageElements = Array.from(gridElement.querySelectorAll("[data-js-grid-image]")) as HTMLImageElement[];
    imageElements.forEach((imageElement, i) => {
      const index = Number(imageElement.getAttribute("data-index"));
      const src = imageElement.getAttribute("src") || "";
      const title = imageElement.getAttribute("data-js-title") || "";
      const description = imageElement.getAttribute("data-js-description") || "";

      this.images.push({ index, src, title, description });
    });

    if (this.openModalBtn && this.modal) {
      this.openModalBtn.addEventListener("click", () => this.openModal());
    }

    if (this.closeModalBtn && this.modal) {
      this.closeModalBtn.addEventListener("click", () => this.closeModal());
    }

    // Add ESC key press listener
    document.addEventListener("keydown", (e) => this.handleKeyDown(e));

    // Add background click listener
    if (this.modal) {
      this.modal.addEventListener("click", (e) => this.handleBackgroundClick(e));
    }
  }

  private handleKeyDown(e: KeyboardEvent) {
    // Close modal on ESC key press
    if (e.key === "Escape" || e.key === "Esc") {
      this.closeModal();
    }
  }

  private handleBackgroundClick(e: MouseEvent) {
    // Close only if clicking directly on the modal background (not its children)
    if (e.target === this.modal) {
      this.closeModal();
    }
  }

  private openModal() {
    if (this.modal) {
      this.modal.classList.remove("hidden");
      this.modal.classList.add("flex");
      this.modal.classList.add("overflow-auto");
      document.body.style.overflow = "hidden";
    }
  }

  private closeModal() {
    if (this.modal) {
      this.modal.classList.remove("flex", "overflow-auto");
      this.modal.classList.add("hidden");
      document.body.style.overflow = "";
    }
  }
}

document.addEventListener("DOMContentLoaded", () => new Modal());

</script>
