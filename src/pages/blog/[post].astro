---
export const prerender = false; // Not needed in 'server' mode
import { sanityClient } from "sanity:client";
import { PortableText } from "astro-portabletext";
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";

export interface PageResponse {
    _id: string;
    title: string;
    description: string;
    keywords: string[];
    author: string;
    ogImage: {
        asset: {
            url: string;
        };
    };
    name: string;
}

const formatDate = (dateString:string) => {
  const months = [
    "Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec",
    "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"
  ];

  const date = new Date(dateString);
  const day = date.getDate().toString().padStart(2, '0'); // Двузначный день
  const month = months[date.getMonth()]; // Название месяца
  const year = date.getFullYear(); // Название месяца
  const hours = date.getHours().toString().padStart(2, '0'); // Двузначные часы
  const minutes = date.getMinutes().toString().padStart(2, '0'); // Двузначные минуты

  return `${day} ${month} ${year}`;
};

const query = `*[_type == "pages" && name == "blog"][0]{
  _id,
  title,
  description,
  keywords,
  author,
  name,
  ogImage {
    asset-> {
      url
    }
  }
}`;

const response = await sanityClient.fetch<PageResponse>(query);

if (!response) {
    throw new Error("PageResponse is fault");
}


const {
    title = "Default Title",
    description = "Default Description",
    keywords = [],
    author = "Default Author",
    name = "Default Name",
    ogImage,
} = response || {};

interface PostsResponse {
    title: string;
    slug: {
        current: string;
    };
    attendee?: {
        name: string;
        photoUrl: string;
        academicTitle: string;
    };
    publishedAt?: string;
    mainImage?: {
        url: string;
    };
    gallery?: {
        url: string;
    }[];
    photoUrl?: string[];
    excerpt?: string;
    content?: Array<
        | {
              _type: "block";
              children: Array<{ text: string }>;
          }
        | {
              _type: "image";
              url: string;
          }
    >;
    seo?: {
        metaTitle?: string;
        metaDescription?: string;
        keywords?: string[];
    };
}

function findArticleBySlug(
    articles: PostsResponse[],
    slug: string,
): PostsResponse | undefined {
    return articles.find((article) => article.slug.current === slug);
}

const postQuery = `*[_type == "blogPost"]{
  title,
  slug,
  attendee->{
    name,
    academicTitle,
    photoUrl
  },
  publishedAt,
  mainImage{
    "url": asset->url
  },
  gallery[]{
    "url": asset->url
  },
  photoUrl,
  excerpt,
  content[]{
    ...,
    _type == "image" => {
      "url": asset->url
    }
  },
  seo{
    metaTitle,
    metaDescription,
    keywords
  }
} | order(publishedAt desc)
`;
const post = Astro.params.post;
const postsResponse = await sanityClient.fetch<PostsResponse[]>(postQuery);

if (!response) {
    throw new Error("PostsResponse");
}

if (!post) {
    throw new Error("Post is fault");
}

const foundArticle = findArticleBySlug(postsResponse, post);
console.log(foundArticle)

import Attendee from "../../components/Attendee.astro";
---

<Layout
    title={title}
    description={description}
    keywords={keywords.join(", ")}
    author={author}
    ogImage={ogImage?.asset?.url}
>
    <article class="container box mt-[4rem]  py-5">
        <div class="mt-[2rem] ">
            <h2 class="h1 text-center">{foundArticle?.title}</h2>
            <p class="mx-auto lg:text-xl text-center lg:max-w-[50%]">{foundArticle?.excerpt}</p>
            <div class=" mx-auto lg:max-w-2xl flex items-center justify-between py-2">                
                <div class="text-sm ml-2">{formatDate(foundArticle?.publishedAt?foundArticle?.publishedAt:"")}</div>
                <Attendee
                    name={foundArticle?.attendee?.name
                        ? foundArticle.attendee.name
                        : ""}
                    photoUrl={foundArticle?.attendee?.photoUrl
                        ? foundArticle?.attendee?.photoUrl
                        : ""}
                    academicTitle={foundArticle?.attendee?.academicTitle}
                />
            </div>
        </div>
            <div class=" mt-[1rem] flex flex-col-reverse lg:flex-row gap-8">
                <img
                    class="w-full lg:max-w-[30%] object-cover mx-auto box"
                    src={foundArticle?.mainImage?.url}
                    alt=""
                />
                <div class="">
                    <PortableText value={foundArticle?.content ?? []} />
                </div>
            </div>
            
       
    </article>
</Layout>
